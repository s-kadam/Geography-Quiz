package edu.uga.cs.geographyquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class QuizData {


    // this is a reference to our database; it is used later to run SQL commands
    private SQLiteDatabase db;
    private SQLiteOpenHelper quizDBHelper;
    private static final String[] allColumns = {
            QuizDBHelper.TABLE_QUIZ,
            QuizDBHelper.QUIZ_Q1,
            QuizDBHelper.QUIZ_Q2,
            QuizDBHelper.QUIZ_Q3,
            QuizDBHelper.QUIZ_Q4,
            QuizDBHelper.QUIZ_Q5,
            QuizDBHelper.QUIZ_Q6,
            QuizDBHelper.DATETIME,
            QuizDBHelper.SCORE,

    };

    public QuizData( Context context ) {
        this.quizDBHelper = QuizDBHelper.getInstance( context );
    }

    // Open the database
    public void open() {
        db = quizDBHelper.getWritableDatabase();
    }

    // Close the database
    public void close() {
        if( quizDBHelper != null ) {
            quizDBHelper.close();
        }
    }

    // Retrieve all job leads and return them as a List.
    // This is how we restore persistent objects stored as rows in the job leads table in the database.
    // For each retrieved row, we create a new JobLead (Java POJO object) instance and add it to the list.
    public List<Quiz> getAllQuizzes() {
        ArrayList<Quiz> quizArrayList = new ArrayList<>();
        Cursor cursor = null;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query( QuizDBHelper.TABLE_QUIZ, allColumns,
                    null, null, null, null, null );
            // collect all job leads into a List
            if( cursor.getCount() > 0 ) {
                while( cursor.moveToNext() ) {
                    long id = cursor.getLong( cursor.getColumnIndex( QuizDBHelper.QUIZ_NUM ) );
                    String datetime = String.valueOf(cursor.getString(cursor.getColumnIndex(QuizDBHelper.DATETIME)));
                    String question1 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q1 ) ));
                    String question2 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q2 ) ));
                    String question3 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q3 ) ));
                    String question4 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q4 ) ));
                    String question5 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q5 ) ));
                    String question6 = String.valueOf(cursor.getString( cursor.getColumnIndex( QuizDBHelper.QUIZ_Q6 ) ));
                    float score = cursor.getFloat(cursor.getColumnIndex(QuizDBHelper.SCORE) );
                    Quiz quiz = new Quiz(id, datetime, question1, question2, question3, question4, question5, question6, score);
                    quiz.setQuizNum( id );
                    quizArrayList.add( quiz );
                }
            }
        }
        catch( Exception e ){
            //ignore meeeeee
        }
        finally{
            // we should close the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        return quizArrayList;
    }


    public Quiz storeQuizzes( Quiz quiz ) {

        ContentValues values = new ContentValues();
        values.put( QuizDBHelper.QUIZ_NUM, quiz.getQuizNum());
        values.put( QuizDBHelper.QUIZ_Q1, quiz.getQuestion1() );
        values.put( QuizDBHelper.QUIZ_Q2, quiz.getQuestion2() );
        values.put( QuizDBHelper.QUIZ_Q3, quiz.getQuestion3() );
        values.put( QuizDBHelper.QUIZ_Q4, quiz.getQuestion4() );
        values.put( QuizDBHelper.QUIZ_Q5, quiz.getQuestion5() );
        values.put( QuizDBHelper.QUIZ_Q6, quiz.getQuestion6() );
        values.put( QuizDBHelper.DATETIME, quiz.getDate());
        values.put( QuizDBHelper.SCORE, quiz.getScore() );

        // Insert the new row into the database table;  the id (primary key) will be
        // automatically generated by the database system
        long id = db.insert( QuizDBHelper.TABLE_QUIZ, null, values );

        quiz.setQuizNum( id );

        return quiz;
    }

}
